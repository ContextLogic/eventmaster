input {
    file {
    path => "<%= @log_file %>"
        start_position => "beginning"
        sincedb_path => "/dev/null"
    }
}

filter {
    kv { }
    uuid {
        target => "id"
    }
    ruby {
        code => "
            require 'date'
            require 'socket'

            data = Hash.new
            type = event.get('type')

            event.to_hash.each { |k,v|
                if k == 'id' then
                    event.set('event_id', v)
                else
                    data[k] = v
                    event.remove(k)
                end
            }
            event.set('data_json', data.to_json)

            if data.key?('uid') then
                event.set('user', data['uid'])
            elsif data.key?('ouid') then
                event.set('user', data['ouid'])
            end

            event.set('event_time', Time.now.to_i)
            event.set('received_time', Time.now.to_i)
            event.set('topic_id', '<%= @topic_id %>')
            event.set('dc_id', '<%= @dc_id %>')
            event.set('tag_set', [type])
            event.set('host', Socket.gethostname)
            event.set('target_host_set', [])
            event.remove('id')
        "
    }
}

output {
    cassandra {
        hosts => <%= @cassandra_hosts %>
        port => <%= @cassandra_port %>
        username => "<%= @cassandra_username %>"
        password => "<%= @cassandra_password %>"
        protocol_version => 4
        consistency => 'local_quorum'
        keyspace => 'event_master'
        table => 'temp_event'
        ignore_bad_values => true

        hints => {
            event_id => "timeuuid"
            parent_event_id => "timeuuid"
            topic_id => "timeuuid"
            dc_id => "timeuuid"
            event_time => "timestamp"
            received_time => "timestamp"
            tag_set => "set<text>"
            target_host_set => "set<text>"
        }
    }
}
