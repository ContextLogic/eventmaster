# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: eventmaster.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='eventmaster.proto',
  package='eventmaster',
  syntax='proto3',
  serialized_pb=_b('\n\x11\x65ventmaster.proto\x12\x0b\x65ventmaster\"\xba\x01\n\x05\x45vent\x12\x10\n\x08\x65vent_id\x18\x01 \x01(\t\x12\x17\n\x0fparent_event_id\x18\x02 \x01(\t\x12\x12\n\nevent_time\x18\x03 \x01(\x03\x12\n\n\x02\x64\x63\x18\x04 \x01(\t\x12\x12\n\ntopic_name\x18\x05 \x01(\t\x12\x0f\n\x07tag_set\x18\x06 \x03(\t\x12\x0c\n\x04host\x18\x07 \x01(\t\x12\x17\n\x0ftarget_host_set\x18\x08 \x03(\t\x12\x0c\n\x04user\x18\t \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\n \x01(\x0c\"\xaf\x03\n\x05Query\x12\n\n\x02\x64\x63\x18\x01 \x03(\t\x12\x0c\n\x04host\x18\x02 \x03(\t\x12\x17\n\x0ftarget_host_set\x18\x03 \x03(\t\x12\x0c\n\x04user\x18\x04 \x03(\t\x12\x12\n\ntopic_name\x18\x05 \x03(\t\x12\x0f\n\x07tag_set\x18\x06 \x03(\t\x12\x17\n\x0fparent_event_id\x18\x07 \x03(\t\x12\x0c\n\x04\x64\x61ta\x18\x08 \x01(\t\x12\x18\n\x10start_event_time\x18\t \x01(\x03\x12\x16\n\x0e\x65nd_event_time\x18\n \x01(\x03\x12\x1b\n\x13start_received_time\x18\x0b \x01(\x03\x12\x19\n\x11\x65nd_received_time\x18\x0c \x01(\x03\x12\x12\n\nsort_field\x18\r \x03(\t\x12\x16\n\x0esort_ascending\x18\x0e \x03(\x08\x12\r\n\x05start\x18\x0f \x01(\x05\x12\r\n\x05limit\x18\x10 \x01(\x05\x12\x10\n\x08\x65vent_id\x18\x11 \x01(\t\x12\x18\n\x10tag_and_operator\x18\x12 \x01(\x08\x12 \n\x18target_host_and_operator\x18\x13 \x01(\x08\x12\x17\n\x0f\x65xclude_tag_set\x18\x14 \x03(\t\"_\n\tTimeQuery\x12\x18\n\x10start_event_time\x18\x01 \x01(\x03\x12\x16\n\x0e\x65nd_event_time\x18\x02 \x01(\x03\x12\r\n\x05limit\x18\x03 \x01(\x05\x12\x11\n\tascending\x18\x04 \x01(\x08\"\x1b\n\x07\x45ventId\x12\x10\n\x08\x65vent_id\x18\x01 \x01(\t\"<\n\x05Topic\x12\n\n\x02id\x18\x01 \x01(\t\x12\x12\n\ntopic_name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x61ta_schema\x18\x03 \x01(\x0c\"2\n\x0bTopicResult\x12#\n\x07results\x18\x01 \x03(\x0b\x32\x12.eventmaster.Topic\"M\n\x12UpdateTopicRequest\x12\x10\n\x08old_name\x18\x01 \x01(\t\x12\x10\n\x08new_name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x61ta_schema\x18\x03 \x01(\x0c\"(\n\x12\x44\x65leteTopicRequest\x12\x12\n\ntopic_name\x18\x01 \x01(\t\"!\n\x02\x44\x63\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0f\n\x07\x64\x63_name\x18\x02 \x01(\t\",\n\x08\x44\x63Result\x12 \n\x07results\x18\x01 \x03(\x0b\x32\x0f.eventmaster.Dc\"5\n\x0fUpdateDcRequest\x12\x10\n\x08old_name\x18\x01 \x01(\t\x12\x10\n\x08new_name\x18\x02 \x01(\t\"\x1b\n\rWriteResponse\x12\n\n\x02id\x18\x03 \x01(\t\"\x0e\n\x0c\x45mptyRequest\"\x14\n\x12HealthcheckRequest\"\'\n\x13HealthcheckResponse\x12\x10\n\x08response\x18\x01 \x01(\t2\xb1\x06\n\x0b\x45ventMaster\x12<\n\x08\x41\x64\x64\x45vent\x12\x12.eventmaster.Event\x1a\x1a.eventmaster.WriteResponse\"\x00\x12\x37\n\tGetEvents\x12\x12.eventmaster.Query\x1a\x12.eventmaster.Event\"\x00\x30\x01\x12:\n\x0cGetEventById\x12\x14.eventmaster.EventId\x1a\x12.eventmaster.Event\"\x00\x12?\n\x0bGetEventIds\x12\x16.eventmaster.TimeQuery\x1a\x14.eventmaster.EventId\"\x00\x30\x01\x12<\n\x08\x41\x64\x64Topic\x12\x12.eventmaster.Topic\x1a\x1a.eventmaster.WriteResponse\"\x00\x12L\n\x0bUpdateTopic\x12\x1f.eventmaster.UpdateTopicRequest\x1a\x1a.eventmaster.WriteResponse\"\x00\x12L\n\x0b\x44\x65leteTopic\x12\x1f.eventmaster.DeleteTopicRequest\x1a\x1a.eventmaster.WriteResponse\"\x00\x12\x42\n\tGetTopics\x12\x19.eventmaster.EmptyRequest\x1a\x18.eventmaster.TopicResult\"\x00\x12\x36\n\x05\x41\x64\x64\x44\x63\x12\x0f.eventmaster.Dc\x1a\x1a.eventmaster.WriteResponse\"\x00\x12\x46\n\x08UpdateDc\x12\x1c.eventmaster.UpdateDcRequest\x1a\x1a.eventmaster.WriteResponse\"\x00\x12<\n\x06GetDcs\x12\x19.eventmaster.EmptyRequest\x1a\x15.eventmaster.DcResult\"\x00\x12R\n\x0bHealthcheck\x12\x1f.eventmaster.HealthcheckRequest\x1a .eventmaster.HealthcheckResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EVENT = _descriptor.Descriptor(
  name='Event',
  full_name='eventmaster.Event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='event_id', full_name='eventmaster.Event.event_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parent_event_id', full_name='eventmaster.Event.parent_event_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='event_time', full_name='eventmaster.Event.event_time', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dc', full_name='eventmaster.Event.dc', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic_name', full_name='eventmaster.Event.topic_name', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tag_set', full_name='eventmaster.Event.tag_set', index=5,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='host', full_name='eventmaster.Event.host', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target_host_set', full_name='eventmaster.Event.target_host_set', index=7,
      number=8, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user', full_name='eventmaster.Event.user', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='eventmaster.Event.data', index=9,
      number=10, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=35,
  serialized_end=221,
)


_QUERY = _descriptor.Descriptor(
  name='Query',
  full_name='eventmaster.Query',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dc', full_name='eventmaster.Query.dc', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='host', full_name='eventmaster.Query.host', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target_host_set', full_name='eventmaster.Query.target_host_set', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='user', full_name='eventmaster.Query.user', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic_name', full_name='eventmaster.Query.topic_name', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tag_set', full_name='eventmaster.Query.tag_set', index=5,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parent_event_id', full_name='eventmaster.Query.parent_event_id', index=6,
      number=7, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='eventmaster.Query.data', index=7,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_event_time', full_name='eventmaster.Query.start_event_time', index=8,
      number=9, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_event_time', full_name='eventmaster.Query.end_event_time', index=9,
      number=10, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_received_time', full_name='eventmaster.Query.start_received_time', index=10,
      number=11, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_received_time', full_name='eventmaster.Query.end_received_time', index=11,
      number=12, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sort_field', full_name='eventmaster.Query.sort_field', index=12,
      number=13, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sort_ascending', full_name='eventmaster.Query.sort_ascending', index=13,
      number=14, type=8, cpp_type=7, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start', full_name='eventmaster.Query.start', index=14,
      number=15, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='limit', full_name='eventmaster.Query.limit', index=15,
      number=16, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='event_id', full_name='eventmaster.Query.event_id', index=16,
      number=17, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tag_and_operator', full_name='eventmaster.Query.tag_and_operator', index=17,
      number=18, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target_host_and_operator', full_name='eventmaster.Query.target_host_and_operator', index=18,
      number=19, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exclude_tag_set', full_name='eventmaster.Query.exclude_tag_set', index=19,
      number=20, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=224,
  serialized_end=655,
)


_TIMEQUERY = _descriptor.Descriptor(
  name='TimeQuery',
  full_name='eventmaster.TimeQuery',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start_event_time', full_name='eventmaster.TimeQuery.start_event_time', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_event_time', full_name='eventmaster.TimeQuery.end_event_time', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='limit', full_name='eventmaster.TimeQuery.limit', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ascending', full_name='eventmaster.TimeQuery.ascending', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=657,
  serialized_end=752,
)


_EVENTID = _descriptor.Descriptor(
  name='EventId',
  full_name='eventmaster.EventId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='event_id', full_name='eventmaster.EventId.event_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=754,
  serialized_end=781,
)


_TOPIC = _descriptor.Descriptor(
  name='Topic',
  full_name='eventmaster.Topic',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='eventmaster.Topic.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic_name', full_name='eventmaster.Topic.topic_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_schema', full_name='eventmaster.Topic.data_schema', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=783,
  serialized_end=843,
)


_TOPICRESULT = _descriptor.Descriptor(
  name='TopicResult',
  full_name='eventmaster.TopicResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='eventmaster.TopicResult.results', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=845,
  serialized_end=895,
)


_UPDATETOPICREQUEST = _descriptor.Descriptor(
  name='UpdateTopicRequest',
  full_name='eventmaster.UpdateTopicRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='old_name', full_name='eventmaster.UpdateTopicRequest.old_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='new_name', full_name='eventmaster.UpdateTopicRequest.new_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_schema', full_name='eventmaster.UpdateTopicRequest.data_schema', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=897,
  serialized_end=974,
)


_DELETETOPICREQUEST = _descriptor.Descriptor(
  name='DeleteTopicRequest',
  full_name='eventmaster.DeleteTopicRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic_name', full_name='eventmaster.DeleteTopicRequest.topic_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=976,
  serialized_end=1016,
)


_DC = _descriptor.Descriptor(
  name='Dc',
  full_name='eventmaster.Dc',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='eventmaster.Dc.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dc_name', full_name='eventmaster.Dc.dc_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1018,
  serialized_end=1051,
)


_DCRESULT = _descriptor.Descriptor(
  name='DcResult',
  full_name='eventmaster.DcResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='eventmaster.DcResult.results', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1053,
  serialized_end=1097,
)


_UPDATEDCREQUEST = _descriptor.Descriptor(
  name='UpdateDcRequest',
  full_name='eventmaster.UpdateDcRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='old_name', full_name='eventmaster.UpdateDcRequest.old_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='new_name', full_name='eventmaster.UpdateDcRequest.new_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1099,
  serialized_end=1152,
)


_WRITERESPONSE = _descriptor.Descriptor(
  name='WriteResponse',
  full_name='eventmaster.WriteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='eventmaster.WriteResponse.id', index=0,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1154,
  serialized_end=1181,
)


_EMPTYREQUEST = _descriptor.Descriptor(
  name='EmptyRequest',
  full_name='eventmaster.EmptyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1183,
  serialized_end=1197,
)


_HEALTHCHECKREQUEST = _descriptor.Descriptor(
  name='HealthcheckRequest',
  full_name='eventmaster.HealthcheckRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1199,
  serialized_end=1219,
)


_HEALTHCHECKRESPONSE = _descriptor.Descriptor(
  name='HealthcheckResponse',
  full_name='eventmaster.HealthcheckResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='eventmaster.HealthcheckResponse.response', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1221,
  serialized_end=1260,
)

_TOPICRESULT.fields_by_name['results'].message_type = _TOPIC
_DCRESULT.fields_by_name['results'].message_type = _DC
DESCRIPTOR.message_types_by_name['Event'] = _EVENT
DESCRIPTOR.message_types_by_name['Query'] = _QUERY
DESCRIPTOR.message_types_by_name['TimeQuery'] = _TIMEQUERY
DESCRIPTOR.message_types_by_name['EventId'] = _EVENTID
DESCRIPTOR.message_types_by_name['Topic'] = _TOPIC
DESCRIPTOR.message_types_by_name['TopicResult'] = _TOPICRESULT
DESCRIPTOR.message_types_by_name['UpdateTopicRequest'] = _UPDATETOPICREQUEST
DESCRIPTOR.message_types_by_name['DeleteTopicRequest'] = _DELETETOPICREQUEST
DESCRIPTOR.message_types_by_name['Dc'] = _DC
DESCRIPTOR.message_types_by_name['DcResult'] = _DCRESULT
DESCRIPTOR.message_types_by_name['UpdateDcRequest'] = _UPDATEDCREQUEST
DESCRIPTOR.message_types_by_name['WriteResponse'] = _WRITERESPONSE
DESCRIPTOR.message_types_by_name['EmptyRequest'] = _EMPTYREQUEST
DESCRIPTOR.message_types_by_name['HealthcheckRequest'] = _HEALTHCHECKREQUEST
DESCRIPTOR.message_types_by_name['HealthcheckResponse'] = _HEALTHCHECKRESPONSE

Event = _reflection.GeneratedProtocolMessageType('Event', (_message.Message,), dict(
  DESCRIPTOR = _EVENT,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.Event)
  ))
_sym_db.RegisterMessage(Event)

Query = _reflection.GeneratedProtocolMessageType('Query', (_message.Message,), dict(
  DESCRIPTOR = _QUERY,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.Query)
  ))
_sym_db.RegisterMessage(Query)

TimeQuery = _reflection.GeneratedProtocolMessageType('TimeQuery', (_message.Message,), dict(
  DESCRIPTOR = _TIMEQUERY,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.TimeQuery)
  ))
_sym_db.RegisterMessage(TimeQuery)

EventId = _reflection.GeneratedProtocolMessageType('EventId', (_message.Message,), dict(
  DESCRIPTOR = _EVENTID,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.EventId)
  ))
_sym_db.RegisterMessage(EventId)

Topic = _reflection.GeneratedProtocolMessageType('Topic', (_message.Message,), dict(
  DESCRIPTOR = _TOPIC,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.Topic)
  ))
_sym_db.RegisterMessage(Topic)

TopicResult = _reflection.GeneratedProtocolMessageType('TopicResult', (_message.Message,), dict(
  DESCRIPTOR = _TOPICRESULT,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.TopicResult)
  ))
_sym_db.RegisterMessage(TopicResult)

UpdateTopicRequest = _reflection.GeneratedProtocolMessageType('UpdateTopicRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPDATETOPICREQUEST,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.UpdateTopicRequest)
  ))
_sym_db.RegisterMessage(UpdateTopicRequest)

DeleteTopicRequest = _reflection.GeneratedProtocolMessageType('DeleteTopicRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETETOPICREQUEST,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.DeleteTopicRequest)
  ))
_sym_db.RegisterMessage(DeleteTopicRequest)

Dc = _reflection.GeneratedProtocolMessageType('Dc', (_message.Message,), dict(
  DESCRIPTOR = _DC,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.Dc)
  ))
_sym_db.RegisterMessage(Dc)

DcResult = _reflection.GeneratedProtocolMessageType('DcResult', (_message.Message,), dict(
  DESCRIPTOR = _DCRESULT,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.DcResult)
  ))
_sym_db.RegisterMessage(DcResult)

UpdateDcRequest = _reflection.GeneratedProtocolMessageType('UpdateDcRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPDATEDCREQUEST,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.UpdateDcRequest)
  ))
_sym_db.RegisterMessage(UpdateDcRequest)

WriteResponse = _reflection.GeneratedProtocolMessageType('WriteResponse', (_message.Message,), dict(
  DESCRIPTOR = _WRITERESPONSE,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.WriteResponse)
  ))
_sym_db.RegisterMessage(WriteResponse)

EmptyRequest = _reflection.GeneratedProtocolMessageType('EmptyRequest', (_message.Message,), dict(
  DESCRIPTOR = _EMPTYREQUEST,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.EmptyRequest)
  ))
_sym_db.RegisterMessage(EmptyRequest)

HealthcheckRequest = _reflection.GeneratedProtocolMessageType('HealthcheckRequest', (_message.Message,), dict(
  DESCRIPTOR = _HEALTHCHECKREQUEST,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.HealthcheckRequest)
  ))
_sym_db.RegisterMessage(HealthcheckRequest)

HealthcheckResponse = _reflection.GeneratedProtocolMessageType('HealthcheckResponse', (_message.Message,), dict(
  DESCRIPTOR = _HEALTHCHECKRESPONSE,
  __module__ = 'eventmaster_pb2'
  # @@protoc_insertion_point(class_scope:eventmaster.HealthcheckResponse)
  ))
_sym_db.RegisterMessage(HealthcheckResponse)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class EventMasterStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddEvent = channel.unary_unary(
          '/eventmaster.EventMaster/AddEvent',
          request_serializer=Event.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.GetEvents = channel.unary_stream(
          '/eventmaster.EventMaster/GetEvents',
          request_serializer=Query.SerializeToString,
          response_deserializer=Event.FromString,
          )
      self.GetEventById = channel.unary_unary(
          '/eventmaster.EventMaster/GetEventById',
          request_serializer=EventId.SerializeToString,
          response_deserializer=Event.FromString,
          )
      self.GetEventIds = channel.unary_stream(
          '/eventmaster.EventMaster/GetEventIds',
          request_serializer=TimeQuery.SerializeToString,
          response_deserializer=EventId.FromString,
          )
      self.AddTopic = channel.unary_unary(
          '/eventmaster.EventMaster/AddTopic',
          request_serializer=Topic.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.UpdateTopic = channel.unary_unary(
          '/eventmaster.EventMaster/UpdateTopic',
          request_serializer=UpdateTopicRequest.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.DeleteTopic = channel.unary_unary(
          '/eventmaster.EventMaster/DeleteTopic',
          request_serializer=DeleteTopicRequest.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.GetTopics = channel.unary_unary(
          '/eventmaster.EventMaster/GetTopics',
          request_serializer=EmptyRequest.SerializeToString,
          response_deserializer=TopicResult.FromString,
          )
      self.AddDc = channel.unary_unary(
          '/eventmaster.EventMaster/AddDc',
          request_serializer=Dc.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.UpdateDc = channel.unary_unary(
          '/eventmaster.EventMaster/UpdateDc',
          request_serializer=UpdateDcRequest.SerializeToString,
          response_deserializer=WriteResponse.FromString,
          )
      self.GetDcs = channel.unary_unary(
          '/eventmaster.EventMaster/GetDcs',
          request_serializer=EmptyRequest.SerializeToString,
          response_deserializer=DcResult.FromString,
          )
      self.Healthcheck = channel.unary_unary(
          '/eventmaster.EventMaster/Healthcheck',
          request_serializer=HealthcheckRequest.SerializeToString,
          response_deserializer=HealthcheckResponse.FromString,
          )


  class EventMasterServicer(object):

    def AddEvent(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEvents(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEventById(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEventIds(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddTopic(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateTopic(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteTopic(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTopics(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AddDc(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateDc(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetDcs(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Healthcheck(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_EventMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddEvent': grpc.unary_unary_rpc_method_handler(
            servicer.AddEvent,
            request_deserializer=Event.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'GetEvents': grpc.unary_stream_rpc_method_handler(
            servicer.GetEvents,
            request_deserializer=Query.FromString,
            response_serializer=Event.SerializeToString,
        ),
        'GetEventById': grpc.unary_unary_rpc_method_handler(
            servicer.GetEventById,
            request_deserializer=EventId.FromString,
            response_serializer=Event.SerializeToString,
        ),
        'GetEventIds': grpc.unary_stream_rpc_method_handler(
            servicer.GetEventIds,
            request_deserializer=TimeQuery.FromString,
            response_serializer=EventId.SerializeToString,
        ),
        'AddTopic': grpc.unary_unary_rpc_method_handler(
            servicer.AddTopic,
            request_deserializer=Topic.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'UpdateTopic': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTopic,
            request_deserializer=UpdateTopicRequest.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'DeleteTopic': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTopic,
            request_deserializer=DeleteTopicRequest.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'GetTopics': grpc.unary_unary_rpc_method_handler(
            servicer.GetTopics,
            request_deserializer=EmptyRequest.FromString,
            response_serializer=TopicResult.SerializeToString,
        ),
        'AddDc': grpc.unary_unary_rpc_method_handler(
            servicer.AddDc,
            request_deserializer=Dc.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'UpdateDc': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateDc,
            request_deserializer=UpdateDcRequest.FromString,
            response_serializer=WriteResponse.SerializeToString,
        ),
        'GetDcs': grpc.unary_unary_rpc_method_handler(
            servicer.GetDcs,
            request_deserializer=EmptyRequest.FromString,
            response_serializer=DcResult.SerializeToString,
        ),
        'Healthcheck': grpc.unary_unary_rpc_method_handler(
            servicer.Healthcheck,
            request_deserializer=HealthcheckRequest.FromString,
            response_serializer=HealthcheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'eventmaster.EventMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaEventMasterServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddEvent(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEvents(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEventById(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEventIds(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddTopic(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateTopic(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteTopic(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTopics(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AddDc(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateDc(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetDcs(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Healthcheck(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaEventMasterStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddEvent.future = None
    def GetEvents(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def GetEventById(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetEventById.future = None
    def GetEventIds(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def AddTopic(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddTopic.future = None
    def UpdateTopic(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpdateTopic.future = None
    def DeleteTopic(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DeleteTopic.future = None
    def GetTopics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetTopics.future = None
    def AddDc(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddDc.future = None
    def UpdateDc(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpdateDc.future = None
    def GetDcs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetDcs.future = None
    def Healthcheck(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Healthcheck.future = None


  def beta_create_EventMaster_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('eventmaster.EventMaster', 'AddDc'): Dc.FromString,
      ('eventmaster.EventMaster', 'AddEvent'): Event.FromString,
      ('eventmaster.EventMaster', 'AddTopic'): Topic.FromString,
      ('eventmaster.EventMaster', 'DeleteTopic'): DeleteTopicRequest.FromString,
      ('eventmaster.EventMaster', 'GetDcs'): EmptyRequest.FromString,
      ('eventmaster.EventMaster', 'GetEventById'): EventId.FromString,
      ('eventmaster.EventMaster', 'GetEventIds'): TimeQuery.FromString,
      ('eventmaster.EventMaster', 'GetEvents'): Query.FromString,
      ('eventmaster.EventMaster', 'GetTopics'): EmptyRequest.FromString,
      ('eventmaster.EventMaster', 'Healthcheck'): HealthcheckRequest.FromString,
      ('eventmaster.EventMaster', 'UpdateDc'): UpdateDcRequest.FromString,
      ('eventmaster.EventMaster', 'UpdateTopic'): UpdateTopicRequest.FromString,
    }
    response_serializers = {
      ('eventmaster.EventMaster', 'AddDc'): WriteResponse.SerializeToString,
      ('eventmaster.EventMaster', 'AddEvent'): WriteResponse.SerializeToString,
      ('eventmaster.EventMaster', 'AddTopic'): WriteResponse.SerializeToString,
      ('eventmaster.EventMaster', 'DeleteTopic'): WriteResponse.SerializeToString,
      ('eventmaster.EventMaster', 'GetDcs'): DcResult.SerializeToString,
      ('eventmaster.EventMaster', 'GetEventById'): Event.SerializeToString,
      ('eventmaster.EventMaster', 'GetEventIds'): EventId.SerializeToString,
      ('eventmaster.EventMaster', 'GetEvents'): Event.SerializeToString,
      ('eventmaster.EventMaster', 'GetTopics'): TopicResult.SerializeToString,
      ('eventmaster.EventMaster', 'Healthcheck'): HealthcheckResponse.SerializeToString,
      ('eventmaster.EventMaster', 'UpdateDc'): WriteResponse.SerializeToString,
      ('eventmaster.EventMaster', 'UpdateTopic'): WriteResponse.SerializeToString,
    }
    method_implementations = {
      ('eventmaster.EventMaster', 'AddDc'): face_utilities.unary_unary_inline(servicer.AddDc),
      ('eventmaster.EventMaster', 'AddEvent'): face_utilities.unary_unary_inline(servicer.AddEvent),
      ('eventmaster.EventMaster', 'AddTopic'): face_utilities.unary_unary_inline(servicer.AddTopic),
      ('eventmaster.EventMaster', 'DeleteTopic'): face_utilities.unary_unary_inline(servicer.DeleteTopic),
      ('eventmaster.EventMaster', 'GetDcs'): face_utilities.unary_unary_inline(servicer.GetDcs),
      ('eventmaster.EventMaster', 'GetEventById'): face_utilities.unary_unary_inline(servicer.GetEventById),
      ('eventmaster.EventMaster', 'GetEventIds'): face_utilities.unary_stream_inline(servicer.GetEventIds),
      ('eventmaster.EventMaster', 'GetEvents'): face_utilities.unary_stream_inline(servicer.GetEvents),
      ('eventmaster.EventMaster', 'GetTopics'): face_utilities.unary_unary_inline(servicer.GetTopics),
      ('eventmaster.EventMaster', 'Healthcheck'): face_utilities.unary_unary_inline(servicer.Healthcheck),
      ('eventmaster.EventMaster', 'UpdateDc'): face_utilities.unary_unary_inline(servicer.UpdateDc),
      ('eventmaster.EventMaster', 'UpdateTopic'): face_utilities.unary_unary_inline(servicer.UpdateTopic),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_EventMaster_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('eventmaster.EventMaster', 'AddDc'): Dc.SerializeToString,
      ('eventmaster.EventMaster', 'AddEvent'): Event.SerializeToString,
      ('eventmaster.EventMaster', 'AddTopic'): Topic.SerializeToString,
      ('eventmaster.EventMaster', 'DeleteTopic'): DeleteTopicRequest.SerializeToString,
      ('eventmaster.EventMaster', 'GetDcs'): EmptyRequest.SerializeToString,
      ('eventmaster.EventMaster', 'GetEventById'): EventId.SerializeToString,
      ('eventmaster.EventMaster', 'GetEventIds'): TimeQuery.SerializeToString,
      ('eventmaster.EventMaster', 'GetEvents'): Query.SerializeToString,
      ('eventmaster.EventMaster', 'GetTopics'): EmptyRequest.SerializeToString,
      ('eventmaster.EventMaster', 'Healthcheck'): HealthcheckRequest.SerializeToString,
      ('eventmaster.EventMaster', 'UpdateDc'): UpdateDcRequest.SerializeToString,
      ('eventmaster.EventMaster', 'UpdateTopic'): UpdateTopicRequest.SerializeToString,
    }
    response_deserializers = {
      ('eventmaster.EventMaster', 'AddDc'): WriteResponse.FromString,
      ('eventmaster.EventMaster', 'AddEvent'): WriteResponse.FromString,
      ('eventmaster.EventMaster', 'AddTopic'): WriteResponse.FromString,
      ('eventmaster.EventMaster', 'DeleteTopic'): WriteResponse.FromString,
      ('eventmaster.EventMaster', 'GetDcs'): DcResult.FromString,
      ('eventmaster.EventMaster', 'GetEventById'): Event.FromString,
      ('eventmaster.EventMaster', 'GetEventIds'): EventId.FromString,
      ('eventmaster.EventMaster', 'GetEvents'): Event.FromString,
      ('eventmaster.EventMaster', 'GetTopics'): TopicResult.FromString,
      ('eventmaster.EventMaster', 'Healthcheck'): HealthcheckResponse.FromString,
      ('eventmaster.EventMaster', 'UpdateDc'): WriteResponse.FromString,
      ('eventmaster.EventMaster', 'UpdateTopic'): WriteResponse.FromString,
    }
    cardinalities = {
      'AddDc': cardinality.Cardinality.UNARY_UNARY,
      'AddEvent': cardinality.Cardinality.UNARY_UNARY,
      'AddTopic': cardinality.Cardinality.UNARY_UNARY,
      'DeleteTopic': cardinality.Cardinality.UNARY_UNARY,
      'GetDcs': cardinality.Cardinality.UNARY_UNARY,
      'GetEventById': cardinality.Cardinality.UNARY_UNARY,
      'GetEventIds': cardinality.Cardinality.UNARY_STREAM,
      'GetEvents': cardinality.Cardinality.UNARY_STREAM,
      'GetTopics': cardinality.Cardinality.UNARY_UNARY,
      'Healthcheck': cardinality.Cardinality.UNARY_UNARY,
      'UpdateDc': cardinality.Cardinality.UNARY_UNARY,
      'UpdateTopic': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'eventmaster.EventMaster', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
